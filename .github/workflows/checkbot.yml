name: checkbot
on:
  issue_comment:
    types: [created]
jobs:
  # check that CML container builds properly
  build-container:
    if: startsWith(github.event.comment.body, '/tests')
    runs-on: [ubuntu-18.04]
    steps:
      - name: React Seen
        uses: actions/github-script@v2
        with:
          script: |
            const perm = await github.repos.getCollaboratorPermissionLevel({
              owner: context.repo.owner, repo: context.repo.repo,
              username: context.payload.comment.user.login})
            if (!["admin", "write"].includes(perm.data.permission)){
              github.reactions.createForIssueComment({
                owner: context.repo.owner, repo: context.repo.repo,
                comment_id: context.payload.comment.id, content: "laugh"})
              throw "Permission denied for user " + context.payload.comment.user.login
            }
            github.reactions.createForIssueComment({
              owner: context.repo.owner, repo: context.repo.repo,
              comment_id: context.payload.comment.id, content: "eyes"})
          github-token: ${{ secrets.TEST_GITHUB_TOKEN }}
      - uses: actions/checkout@v2
      - name: Build & Publish test image
        run: |
          echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
          docker build \
            --build-arg "CML_VERSION=$CML_VERSION" \
            --build-arg "DVC_VERSION=$DVC_VERSION" \
            --build-arg "PYTHON_VERSION=$PYTHON_VERSION" \
            --build-arg "BASE_IMAGE=$BASE_IMAGE" \
            -t dvcorg/cml-test .
          docker run --name runner --rm \
            -e "REPO_TOKEN=${{ secrets.TEST_GITHUB_TOKEN }}" \
            -e "RUNNER_REPO=https://github.com/${GITHUB_REPOSITORY}" \
            -e "RUNNER_LABELS=cml-docker" \
            -e "RUNNER_IDLE_TIMEOUT=10" \
            dvcorg/cml-test
        env:
          CML_VERSION: 0
          DVC_VERSION: 2
          PYTHON_VERSION: 3.8
          BASE_IMAGE: 'ubuntu:20.04'
  # test container all CML features, vega and actions with issues in the past
  check-container:
    needs: build-container
    runs-on: [ubuntu-18.04]
    container: dvcorg/cml-test
    steps:
      - uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.3
      - uses: r-lib/actions/setup-r@master
      - uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: CML test
        env:
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          REPO_TOKEN: ${{ secrets.TEST_GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo 'Check container!' > report.md
          vl2svg assets/vega-lite.json | cml-publish --md >> report.md
          vl2png assets/vega-lite.json | cml-publish --md >> report.md
          cml-send-comment report.md
          cml-send-github-check report.md

          cml-runner \
            --cloud-spot \
            --cloud azure \
            --cloud-region eastus \
            --cloud-type Standard_NC6 \
            --idle-timeout 3600 \
            --labels cml-runner-az-gpu

          cml-runner \
            --cloud-spot \
            --cloud aws \
            --cloud-region us-west \
            --cloud-type g2.2xlarge \
            --idle-timeout 3600 \
            --labels cml-runner-aws-gpu
  test_machine_aws:
    needs: check-container
    runs-on: [self-hosted, cml-runner-aws-gpu]
    steps:
      - name: tests
        run: |
          nvidia-smi
  test_container_aws:
    needs: check-container
    runs-on: [self-hosted, cml-runner-aws-gpu]
    container:
      image: docker://dvcorg/cml-test
      options: --gpus all
    steps:
      - name: tests
        run: |
          nvidia-smi
  test_machine_az:
    needs: check-container
    runs-on: [self-hosted, cml-runner-az-gpu]
    steps:
      - name: tests
        run: |
          nvidia-smi
  test_container_az:
    needs: check-container
    runs-on: [self-hosted, cml-runner-az-gpu]
    container:
      image: docker://dvcorg/cml-test
      options: --gpus all
    steps:
      - name: tests
        run: |
          nvidia-smi
  chatbot:
    if: startsWith(github.event.comment.body, '/cml-')
    runs-on: [ubuntu-latest]
    steps:
      - name: React Seen
        uses: actions/github-script@v2
        with:
          script: |
            const perm = await github.repos.getCollaboratorPermissionLevel({
              owner: context.repo.owner, repo: context.repo.repo,
              username: context.payload.comment.user.login})
            if (!["admin", "write"].includes(perm.data.permission)){
              github.reactions.createForIssueComment({
                owner: context.repo.owner, repo: context.repo.repo,
                comment_id: context.payload.comment.id, content: "laugh"})
              throw "Permission denied for user " + context.payload.comment.user.login
            }
            github.reactions.createForIssueComment({
              owner: context.repo.owner, repo: context.repo.repo,
              comment_id: context.payload.comment.id, content: "eyes"})
          github-token: ${{ secrets.TEST_GITHUB_TOKEN }}
      - uses: actions/checkout@v2
      - name: chatops
        id: chatops
        uses: actions/github-script@v1
        env:
          COMMAND: ${{github.event.comment.body}}
        with:
          github-token: ${{ secrets.TEST_GITHUB_TOKEN }}
          script: |
            github.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.issue.number
            }).then( (pr) => {
              console.log(`::set-output name=COMMAND::${process.env.COMMAND}`)
            })
      - name: chatactions
        run: |
          npm ci
          sudo npm link
          # ${{steps.chatops.outputs.COMMAND}}
